#!/usr/bin/env python

"""
Lookup an entry in an abook(1) addressbook file.
"""

import itertools
import optparse
import os
import re
import sys


def is_record_id(line):
    """Return True if line is a record id line."""
    return len(line) > 2 and line[0] == "[" and line[1] in "0123456789"


def record_matches(record, patterns):
    """Return True if record matches any pattern."""
    for pattern in patterns:
        for line in record:
            if pattern.search(line):
                return True
    return False


def main():
    """main"""
    option_parser = optparse.OptionParser(
        usage="usage: %prog [options] PATTERN ...\n" +
            "  Lookup an entry in an abook(1) addressbook file."
    )
    option_parser.add_option(
        "--datafile",
        default="$HOME/.abook/addressbook",
        help="use an alternative addressbook file (default=%default)"
    )

    # Parse command line.
    (options, args) = option_parser.parse_args()
    if len(args) == 0:
        option_parser.error("No pattern specified.")
    options.datafile = os.path.expandvars(options.datafile)

    # Compile args to regular expressions.
    patterns = [re.compile(arg, re.IGNORECASE) for arg in args]

    # Process datafile.
    first = True
    with open(options.datafile) as datafile:
        for key, record in itertools.groupby(datafile, key=is_record_id):
            if not key:
                record = list(
                    line.rstrip()
                    for line in record
                    if len(line) > 1
                )
                if record_matches(record, patterns):
                    if first:
                        first = False
                    else:
                        print ""
                    for line in record:
                        print line

    return 0

if __name__ == "__main__":
    sys.exit(main())
